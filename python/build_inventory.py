#!/usr/bin/python
"""
This script processes the file dropped by Terraform into an Ansible inventory file
"""
import os
import sys

def get_host_dict():
    """
    Convert the output text file into a dictionary
    """
    try:
        tf_out = open("../terraform/hosts_out.txt", "r")
    except Exception as ex:
        sys.stderr.write("Unable to open terraform output file due to "\
                            + str(ex) + "\n")
        os._exit(-1)
    host_dict = {"managers" : [], "workers" : []}
    for line in tf_out:
        (host_type, ip_addr) = line.strip('\n').split(" ")
        if host_type == 'manager':
            host_dict['managers'].append(ip_addr)
        elif host_type == 'worker':
            host_dict['workers'].append(ip_addr)
        else:
            sys.stderr.write("Invalid host type generated by Terraform!\n")
            os._exit(-1)
    tf_out.close()
    return host_dict

def create_inventory_file(host_dict):
    """
    Build an Ansible inventory file from the host dict
    """
    try:
        inv_ini = open("../ansible/inventory.ini", "w")
    except Exception as ex:
        sys.stderr.write("Unable to open inventory.ini due to "\
                            + str(ex) + "\n")
        os._exit(-1)
    inv_ini.write("[managers]\n")
    inv_ini.write("manager ansible_host=" + host_dict['managers'][0]\
                    + " ansible_user=centos\n")
    inv_ini.write("[workers]\n")
    for i in range(len(host_dict['workers'])):
        inv_ini.write("worker_" + str(i) + " ansible_host="\
                        + host_dict['workers'][i] + " ansible_user="\
                        + "centos\n")
    inv_ini.close()

if __name__ == '__main__':
    HOST_DICT = get_host_dict()
    create_inventory_file(HOST_DICT)
